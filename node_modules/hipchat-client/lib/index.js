// Generated by CoffeeScript 1.7.1
(function() {
  var HipChat, generateError, request;

  request = require('superagent');

  generateError = function(res) {
    var body, err;
    body = res.body && res.body.error || {
      message: 'FLAGRANT ERROR'
    };
    err = new Error(body.message);
    Object.keys(body).forEach(function(k) {
      if (k === !'message') {
        return err[k] = body[k];
      }
    });
    return err;
  };

  HipChat = (function() {
    function HipChat(token) {
      this.token = token;
      if (!this.token) {
        return false;
      }
      this.options = {
        url: 'https://api.hipchat.com/',
        token: this.token,
        message: {
          from: 'JIRA',
          color: 'yellow',
          notify: 1,
          message_format: 'html'
        }
      };
    }

    HipChat.prototype.getMailByMentionName = function(name, cb) {
      if (!name) {
        return false;
      }
      if (!cb) {
        return false;
      }
      return request.get(this.options.url + 'v1/users/list').query({
        auth_token: this.options.token
      }).end(function(res) {
        var email, user, _i, _len, _ref;
        if (!res.ok) {
          return cb(generateError(res));
        } else {
          _ref = res.body.users;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            user = _ref[_i];
            if (user.mention_name === name) {
              email = user.email;
            }
          }
          if (email) {
            return cb(null, email);
          } else {
            return cb(new Error('Could not find an email in hipchat response'));
          }
        }
      });
    };

    HipChat.prototype.getRoomByName = function(name, cb) {
      if (!name) {
        return false;
      }
      if (!cb) {
        return false;
      }
      return request.get(this.options.url + 'v1/rooms/list').query({
        auth_token: this.options.token
      }).end(function(res) {
        var room, _i, _len, _ref, _results;
        if (!res.ok) {
          return cb(generateError(res));
        } else {
          _ref = res.body.rooms;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            room = _ref[_i];
            if (room.name === name) {
              _results.push(cb(room.room_id));
            }
          }
          return _results;
        }
      });
    };

    HipChat.prototype.getRoomIdByJid = function(jid, cb) {
      return request.get(this.options.url + 'v1/rooms/list').query({
        auth_token: this.options.token
      }).end(function(res) {
        var room, room_id, _i, _len, _ref;
        if (!res.ok) {
          return cb(generateError(res));
        } else {
          _ref = res.body.rooms;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            room = _ref[_i];
            if (room.xmpp_jid === jid) {
              room_id = room.room_id;
            }
          }
          return cb(null, room_id);
        }
      });
    };

    HipChat.prototype.getRoomParticipantIds = function(room_id, cb) {
      return request.get(this.options.url + 'v1/rooms/show').query({
        room_id: room_id,
        auth_token: this.options.token
      }).end(function(res) {
        var ids, p;
        if (!res.ok) {
          return cb(generateError(res));
        } else {
          ids = (function() {
            var _i, _len, _ref, _results;
            _ref = res.body.room.participants;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              _results.push(p.user_id);
            }
            return _results;
          })();
          return cb(null, ids);
        }
      });
    };

    HipChat.prototype.getUsers = function(cb) {
      return request.get(this.options.url + 'v1/users/list').query({
        auth_token: this.options.token
      }).end(function(res) {
        if (!res.ok) {
          return cb(generateError(res));
        } else {
          return cb(null, res.body.users);
        }
      });
    };

    HipChat.prototype.sendRoomMessage = function(message, room_id, params, cb) {
      var data, _ref;
      if (!message) {
        return false;
      }
      if (!room_id) {
        return false;
      }
      if (!params) {
        return false;
      }
      if (!cb) {
        return false;
      }
      data = {
        message: message,
        room_id: room_id,
        auth_token: this.options.token,
        from: params.from || this.options.message.from,
        color: params.color || this.options.message.color,
        notify: (_ref = params.notify) != null ? _ref : this.options.message.notify,
        message_format: params.message_format || this.options.message.message_format
      };
      return request.post(this.options.url + 'v1/rooms/message').type('form').send(data).end(function(res) {
        if (!res.ok) {
          return cb(generateError(res));
        } else {
          return cb(null);
        }
      });
    };

    return HipChat;

  })();

  module.exports = function(auth_token) {
    return new HipChat(auth_token);
  };

}).call(this);
